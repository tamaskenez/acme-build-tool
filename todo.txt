add_public_headers([GLOB|GLOB_RECURSE] ize/*.h [RELATIVE_TO bize]) ha nincs relative akkor relative top-level glob dir lesz
add_public_headers(ize.h bize.h [RELATIVE_TO cize]), relative_to szinten ugy ertelmezve mint elobb
ezen kivul, osszegyujti az osszes //#acme public headers-t es relative to CMAKE_CURRENT_SOURCE_DIR lesz

line numbers in error messages

config modul csak adott helyen keresse a runtime componenseket (dll-t)

ahol lehet, macro helyett fgv, és lokális változónevek rövidek vagy _

known missing features/bugs
- complicated find_package signatures where certain components are required, others not, are not implemented

//#acme namespace <package-name-with-dots>|<namespaces-with-double_colons>|<namespace-alias> { <C++ code> }
//#acme namespace <package-name-with-dots>|<namespaces-with-double_colons>|<namespace-alias> { | }
also put namespace aliases in the same file
also need to add full namespace declaration of the dependent package in case the header itself is not included

acme_add_public_header mukodjon destination nelkul is
config mod megnezhetne hogy megvannak e a felinstallat headerek (esetleg legalabb a package konyvtar include alatt)

acme find package varok rename, hogy a package name (Boost/LibXml2) kulon legyen es a prefix name kulon listabol lekerdezheto (Boost/LIBXML2)

acme_find_package-ben:
if(exists target <package-name>)
	akkor csak
		list(APPEND ACME_FIND_PACKAGE_LIBRARIES <package-name> lesz)
	es feltetelezi hogy be vannak allitva a megfelelo propertyk. Ezert az add_target-nel
  INTERFACE_INCLUDE_DIRECTORIES ide be kell irni azt a konyvtarat amibol indulhatnak az include pathok
  - ha a package source konyvtara a.b.c formaju, akkor a package parent
  - ha a package source konyvtara a/b/c formaju, akkor az 'a' parent
  - egyebkent nem fog menni a master projectbol buildeles
  + a public dep package-ek include dirjeit (csak amiket package-kent talaltunk meg, amiket targetkent, azok maguktol oroklodni fognak)
INTERFACE_COMPILE_DEFINITIONS ide acme find packagenek be kell irnia (append) a public depsek compile_definitionjait
INTERFACE_LINK_LIBRARIES ide jon thistarget=shared lib eseteben az osszes public, staticnal meg az osszes lib

fontos hogy az 'parent include' elobb legyen mint az install-prefix includeja, kulonben master project eseteben elobb talalja meg az esetleg meg regebbi verziot az install konyvtarbol, mint a source konyvtarban a frisset
ezert valahogy detektalni kene, hogy vki ezt beallitja-e es ha igen akkor elorebb hozni

es legelobb legyen maga az aktualis project public include prefixei. ezt ugy lehet biztositani, hogy add target-ben beszurjuk azokat minden ele

talan legegyszerubb, ha feltetel nelkul megcsinalni: mindenkeppen be kene allitani elore ezeket:
- public include prefixek
- parent include, ha van olyan

ezek kozul sajat interface includenak csak a parent includeot kell


mas acme package includolasa:
konyvtar lehet a.b.c meg a/b/c is
at lehet irni a sourceban config kozben, ha nem jo
lehet macroval: #include HEADER_OF_KISHONTI_NAVI_FORMAT_NGN(packedregion.h)
es ez a macro definialva van mindig jo helyre
- localisan buildelve lehet ""
- master projectben parent dirre
- insstallalva pedig a/b/c vagy a.b.c-re
egyszerre lehet mindkettot tamogatni


ehhez kapcsolodik, be kene vezetni hogy installalas konyvtara (include)
- ha nincs beallitva ACME_PUBLIC_HEADER_INSTALL_PREFIX=[FLAT|HIERARCHY]
- akkor ha a sajat konyvtar neve a.b.c, akkor FLAT-be
- egyebkent hierarchical-ba installal
- ha be van allitva, akkor meg abba, ami be van

ne a cmakelistbe allitsuk az acmes add_definitions/include_dirst, hanem az add_targetben, propertyvel vagy include_dirs-el?

hogy lehetne megcsinalni, meg kene-e, hogy teszt appot is lehessen hozzaadni? ugyanabba a projektbe
talan eleve jo lesz, mivel kepzodik a librol target minden infoval egyutt
add_executable(mytest mylib)
nem kell semmit allitani

add namespace alias find package nelkul

use cmake_parse_arguments

add_files mentse ki a listat fileba